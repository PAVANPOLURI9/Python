import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import DBSCAN

# Load and scale data
df = pd.read_csv("C:/Users/pavan/OneDrive/Desktop/Projects/Universities.csv")
df.fillna(df.median(numeric_only=True), inplace=True)
df_numeric = df.select_dtypes(include=['float64', 'int64'])

scaler = StandardScaler()
scaled_data = scaler.fit_transform(df_numeric)

# 🔧 Apply DBSCAN
dbscan = DBSCAN(eps=1.8, min_samples=6)  # These values may need tuning
labels = dbscan.fit_predict(scaled_data)
df['DBSCAN_Cluster'] = labels

# Count clusters and noise
n_clusters = len(set(labels)) - (1 if -1 in labels else 0)
n_noise = list(labels).count(-1)

print(f"✅ Number of clusters found: {n_clusters}")
print(f"❌ Number of noise points: {n_noise}")
print("\n📊 Graduation Rate per Cluster (excluding noise):")
print(df[df['DBSCAN_Cluster'] != -1].groupby('DBSCAN_Cluster')['Graduation rate'].mean())

# 🎨 PCA for visualization
pca = PCA(n_components=2)
pca_result = pca.fit_transform(scaled_data)
df['PCA1'] = pca_result[:, 0]
df['PCA2'] = pca_result[:, 1]

# 📍 Plot clusters with noise
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='PCA1', y='PCA2', hue='DBSCAN_Cluster', palette='tab10', s=50)
plt.title("📦 DBSCAN Clustering with PCA")
plt.xlabel("PCA1")
plt.ylabel("PCA2")
plt.grid(True)
plt.legend(title='Cluster')
plt.tight_layout()
plt.show()
