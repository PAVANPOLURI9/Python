import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.impute import SimpleImputer

# Step 1: Load the raw data
df = pd.read_csv("C:/Users/pavan/OneDrive/Desktop/Projects/Universities.csv")

# Step 2: Split into pure (complete) and missing (incomplete) rows
df_complete = df.dropna()
df_incomplete = df[df.isnull().any(axis=1)]

# Step 3: Select numeric features for clustering
numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns
scaler = StandardScaler()
scaled_complete = scaler.fit_transform(df_complete[numeric_cols])

# Step 4: Cluster only the complete rows
kmeans = KMeans(n_clusters=4, random_state=42)
df_complete['PureCluster'] = kmeans.fit_predict(scaled_complete)

# Step 5: Compute per-cluster medians
cluster_medians = df_complete.groupby('PureCluster')[numeric_cols].median()

# Step 6: Assign each row in df_incomplete to the closest cluster (based on available data)
def assign_cluster(row):
    available = row.dropna()
    best_cluster = None
    best_dist = np.inf
    for cluster_id, median_vals in cluster_medians.iterrows():
        common_cols = available.index.intersection(median_vals.index)
        dist = np.linalg.norm(available[common_cols] - median_vals[common_cols])
        if dist < best_dist:
            best_dist = dist
            best_cluster = cluster_id
    return best_cluster

df_incomplete['EstimatedCluster'] = df_incomplete.apply(assign_cluster, axis=1)

# Step 7: Fill missing values using median of assigned cluster
for col in numeric_cols:
    for cluster_id in cluster_medians.index:
        value = cluster_medians.loc[cluster_id, col]
        mask = (df_incomplete['EstimatedCluster'] == cluster_id) & (df_incomplete[col].isnull())
        df_incomplete.loc[mask, col] = value

# Step 8: Combine both complete and filled-incomplete data
df_complete['EstimatedCluster'] = df_complete['PureCluster']  # for consistency
final_df = pd.concat([df_complete, df_incomplete], ignore_index=True)
final_df.drop(columns=['PureCluster'], errors='ignore', inplace=True)

# Step 9: Save the fully cleaned and imputed dataset
final_df.to_csv("C:/Users/pavan/OneDrive/Desktop/Projects/Universities_Cleaned_Clustered_Imputed.csv", index=False)
print("âœ… Final dataset saved: 'Universities_Cleaned_Clustered_Imputed.csv'")
