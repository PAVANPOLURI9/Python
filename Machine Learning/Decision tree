import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Step 1: Read the dataset
df = pd.read_csv("C:/Users/pavan/OneDrive/Desktop/AI Notes/telecom_churn_data.csv")

# Step 2: Encode categorical variables
label_encoders = {}
for column in df.select_dtypes(include=['object']).columns:
    if column != "Client_Exit":  # Keep target variable unchanged
        le = LabelEncoder()
        df[column] = le.fit_transform(df[column])
        label_encoders[column] = le  # Store encoders for reference

# Step 3: Define features (X) and target variable (y)
X = df.drop(columns=['Client_Exit'])  # Features
y = df['Client_Exit']  # Target variable (churn: Yes/No)

# Step 4: Stratified train-test split (ensures equal class distribution)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

# Step 5: Hyperparameter tuning using GridSearchCV
param_grid = {
    'max_depth': [3, 5, 10, 15],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 3, 5],
    'criterion': ['gini', 'entropy']
}

grid_search = GridSearchCV(DecisionTreeClassifier(random_state=42), param_grid, cv=5, scoring='accuracy')
grid_search.fit(X_train, y_train)

# Best model from GridSearchCV
best_clf = grid_search.best_estimator_
print("Best Parameters:", grid_search.best_params_)

# Step 6: Train Decision Tree with best parameters
best_clf.fit(X_train, y_train)

# Step 7: Make predictions
y_pred = best_clf.predict(X_test)

# Step 8: Evaluate model performance
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

# Display results
print(f"Optimized Model Accuracy: {accuracy:.2f}")
print("\nClassification Report:\n", report)

# Step 9: Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot Confusion Matrix
plt.figure(figsize=(6, 5))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues", xticklabels=['No Exit', 'Exit'], yticklabels=['No Exit', 'Exit'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Step 10: Feature Importance Analysis
importances = best_clf.feature_importances_
feature_names = X.columns

# Sort features by importance
indices = np.argsort(importances)

# Plot Feature Importance
plt.figure(figsize=(10, 5))
plt.barh(range(len(indices)), importances[indices], align="center")
plt.yticks(range(len(indices)), np.array(feature_names)[indices])
plt.xlabel("Feature Importance")
plt.ylabel("Feature Name")
plt.title("Feature Importance in Decision Tree")
plt.show()

# Step 11: Visualize the Decision Tree
plt.figure(figsize=(15, 8))
plot_tree(best_clf, feature_names=X.columns, class_names=['No Exit', 'Exit'], filled=True)
plt.show()
