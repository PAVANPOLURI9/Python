import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Step 1: Read the dataset
df = pd.read_csv("C:/Users/pavan/OneDrive/Desktop/AI Notes/telecom_churn_data.csv")

# Step 2: Encode categorical variables
label_encoders = {}
for column in df.select_dtypes(include=['object']).columns:
    if column != "Client_Exit":  # Target variable remains unchanged
        le = LabelEncoder()
        df[column] = le.fit_transform(df[column])
        label_encoders[column] = le  # Store encoders for future reference

# Step 3: Define features (X) and target variable (y)
X = df.drop(columns=['Client_Exit'])  # Features (independent variables)
y = df['Client_Exit']  # Target variable (dependent variable)

# Step 4: Split the data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Initialize and train Decision Tree model
clf = DecisionTreeClassifier(max_depth=5, random_state=42)  # Limit depth for better visualization
clf.fit(X_train, y_train)

# Step 6: Make predictions on the test set
y_pred = clf.predict(X_test)

# Step 7: Print Confusion Matrix
print(f"Confusion Matrix:\n{confusion_matrix(y_test, y_pred)}\n")
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Step 8: Plot the Decision Tree
plt.figure(figsize=(20, 10))  # Set figure size
plot_tree(clf, feature_names=X.columns, class_names=["Stayed", "Exited"], filled=True, rounded=True)
plt.show()
