import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error

# Load your CSV
df = pd.read_csv("C:/AI/Python/Time series/Korea Natural Gas/Natural gas.zip")
df['Date'] = pd.to_datetime(df['Date'])
df.set_index('Date', inplace=True)
df['Price'] = pd.to_numeric(df['Price'], errors='coerce')
df.dropna(subset=['Price'], inplace=True)

# ========== ARIMA(1,1,1) ==========
arima_model = ARIMA(df['Price'], order=(1, 1, 1))
arima_result = arima_model.fit()
arima_forecast = arima_result.forecast(steps=30)

# ========== SARIMA(1,1,1)(1,1,1,5) ==========
sarima_model = SARIMAX(df['Price'], order=(1, 1, 1), seasonal_order=(1, 1, 1, 5))
sarima_result = sarima_model.fit(disp=False)
sarima_forecast = sarima_result.forecast(steps=30)

# ========== Backtest with last 30 actual values ==========
actual = df['Price'].iloc[-30:]
forecast_index = pd.date_range(start=actual.index[-1] + pd.Timedelta(days=1), periods=30, freq='D')
actual.index = forecast_index  # align for comparison

# Calculate RMSE
arima_rmse = np.sqrt(mean_squared_error(actual, arima_forecast))
sarima_rmse = np.sqrt(mean_squared_error(actual, sarima_forecast))

print(f"\nðŸ“Š RMSE Comparison:")
print(f"ARIMA RMSE:  {arima_rmse:.2f}")
print(f"SARIMA RMSE: {sarima_rmse:.2f}")

# ========== Plot Comparison ==========
recent_data = df['Price'].iloc[-180:]
plt.figure(figsize=(14, 6))
plt.plot(recent_data, label="Last 180 Days - Historical", color='blue')
plt.plot(forecast_index, arima_forecast, label="ARIMA Forecast", color='red')
plt.plot(forecast_index, sarima_forecast, label="SARIMA Forecast", color='green')
plt.title("Apple Stock: ARIMA vs SARIMA (Next 30 Days Forecast)")
plt.xlabel("Date")
plt.ylabel("Price (USD)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
